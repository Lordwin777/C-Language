#include <iostream>
#define max_size 100 // Define max_size for the stack

using namespace std;

class sta
{
    private:
    int top;
    int arr[max_size];
    
    public:
    // Constructor
    sta()
    {
        this->top = -1; // Initialize top to -1
    }
    
    // Check if stack is empty
    bool Is_Empty()
    {
        bool b = (this->top == -1);
        if(b)
            cout << "Stack is Empty" << "\n";
        return b;
    }
    
    // Check if stack is full
    bool Is_Full()
    {
        bool n = (this->top >= max_size - 1);
        if(n)
            cout << "Stack is Full" << "\n";
        return n;
    }
    
    // Push element to stack
    void push(int data)
    {
        if(!Is_Full())
        {
            this->arr[++this->top] = data;
            cout << data << " is Pushed" << "\n";
        }
        else
        {
            cout << "Cannot push, stack is full!" << "\n";
        }
    }
    
    // Pop element from stack
    int pop()
    {
        if(!Is_Empty())
        {
            int popped_element = this->arr[this->top--];
            cout << popped_element << " is Popped" << "\n";
            return popped_element;
        }
        else
        {
            cout << "Cannot pop, stack is empty!" << "\n";
            return -1; // Return -1 if stack is empty
        }
    }
};

int main()
{
    sta stack;

    // Testing stack operations
    stack.push(10);
    stack.push(20);
    stack.push(30);

    stack.pop();
    stack.pop();
    stack.pop();
    stack.pop();  // Attempt to pop from empty stack

    return 0;
}
